{"version":3,"sources":["FunctionalComponent.js","ClassComponent.js","App.js","reportWebVitals.js","index.js"],"names":["FunctionalComponent","React","Component","inputRef","useRef","value","console","log","useState","counter","setCounter","text","setText","useEffect","className","onClick","current","type","ref","onChange","e","target","parentElement","style","backgroundColor","App","isvisible","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPA2CeA,GCzCcC,IAAMC,UDDP,WACxB,IAAMC,EAAWC,iBAAO,MAClBC,EAAQD,iBAAO,GACrBE,QAAQC,IAAI,QAASF,GAHS,MAIDG,mBAAS,GAJR,mBAIxBC,EAJwB,KAIfC,EAJe,OAKPF,mBAAS,IALF,mBAKxBG,EALwB,KAKlBC,EALkB,KAO9BC,qBAAU,WACNP,QAAQC,IAAI,eACb,CAACE,IAGJI,qBAAU,WAEN,OADAP,QAAQC,IAAI,aACL,WAAOD,QAAQC,IAAI,6BAC3B,CAACE,IAeJ,OACI,sBAAKK,UAAU,WAAf,UACI,sDACA,0CAAaL,KACT,wBAAQM,QAAS,kBAhBzBL,EAAWD,EAAU,QACrBJ,EAAMW,QAAUX,EAAMW,QAAU,IAexB,sBACA,uBACA,uBAAOC,KAAK,OAAOZ,MAAOM,EAAMO,IAAKf,EAAUgB,SAVxC,SAACC,GAChBR,EAAQQ,EAAEC,OAAOhB,UAUT,wBAAQU,QAAS,WAdzBZ,EAASa,QAAQM,cAAcC,MAAMC,gBAAkBb,GAc/C,4BEvBDc,MAXf,WAAgB,IAAD,EACmBjB,oBAAS,GAD5B,mBACNkB,EADM,KAEb,OAFa,KAGX,sBAAKZ,UAAU,MAAf,WAEG,EACAY,GAAa,cAAC,EAAD,QCELC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92c592f4.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from 'react';\r\nconst FunctionalComponent = () => {\r\n    const inputRef = useRef(null);\r\n    const value = useRef(0);\r\n    console.log('value', value)\r\n    const[counter, setCounter] = useState(0);\r\n    const[text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect');\r\n    }, [counter])\r\n    // console.log('Functional Counter: ', counter);\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect');\r\n        return () => {console.log('func comp will unmount')}\r\n    }, [counter])\r\n\r\n    const increase = () => {\r\n        setCounter(counter + 1);\r\n        value.current = value.current + 1;\r\n    }\r\n\r\n    const changeBGColor = () => {\r\n        inputRef.current.parentElement.style.backgroundColor = text;\r\n    }\r\n\r\n    const handleText = (e) => {\r\n        setText(e.target.value);\r\n    } \r\n\r\n    return (\r\n        <div className=\"function\">\r\n            <h2>Functional Component</h2>\r\n            <p>Counter: {counter}</p>\r\n                <button onClick={() => increase()}>Increase</button>\r\n                <hr />\r\n                <input type=\"text\" value={text} ref={inputRef} onChange={handleText}/>\r\n                <button onClick={() => changeBGColor()}>BG Colors</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FunctionalComponent;\r\n","import React from 'react';\r\n\r\nclass ClassComponent extends React.Component{\r\n    // constructor(){\r\n    //     super();\r\n    //     this.state = {\r\n    //         counter: 0\r\n    //     }\r\n    //     this.increase = this.increase.bind(this)\r\n    // }\r\n    \r\n    state = {\r\n        counter: 0\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('Component did Mount')\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('ComponentDidUpdate')\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        console.log('componentWillUnmount')\r\n    }\r\n\r\n    increase = () => {\r\n        this.setState({counter: this.state.counter + 1});\r\n    }\r\n    render() {\r\n       // console.log('Class Counter: ', this.state.counter)\r\n        return (\r\n            <div className=\"class\">\r\n                <h2>Class Component</h2>\r\n                <p>Counter: {this.state.counter}</p>\r\n                <button onClick={() => this.increase()}>Increase</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassComponent;\r\n","import {useState} from 'react';\r\nimport ClassComponent from './ClassComponent';\r\nimport FunctionalComponent from './FunctionalComponent';\r\n\r\nfunction App() {\r\n  const [isvisible, setVisible] = useState(true);\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <button onClick={() => setVisible(!isvisible)}>Toggle</button> */}\r\n      {false && <ClassComponent />}\r\n      {isvisible && <FunctionalComponent />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}